/**
 * 关于插件plugin：
 * 如果没有插件，我们想要构建一个 Android 工程，就要自己定义sourceSets，自己定义classpath，自己定义构建步骤等等。
 * 简单地说，插件其实就是一组配置和任务的合集。
 * 常用插件：
 * com.android.application：构建Android app工程
 * com.android.library：构建Android library，通常输出aar
 * maven：发布到 maven 仓库
 *
 * 【补充】
 * android插件有2个必须设置的参数：buildToolsVersion和compileSdkVersion
 */
apply plugin: 'com.android.application'
apply plugin: 'inner_mtjacoco'
//apply plugin: 'mtjacoco'



mtjacoco {
//    coverage=10
//    forceInterrupt = true
//    probeType = "all"
    reportJarLibraryId = "food_report"
    checkByLine = true
}

/**
 * android {}里设置了编译Android项目的参数
 * 【顺便一提】
 * 每次修改了build.gradle，Android studio都会提示sync now，点击后其实就是执行各种指定的task
 * 比如新添加了一个依赖库，sync就会自动执行依赖库的tasks，完成下载、导入之类的操作
 *
 * 执行./gradlew task可以查看所有的task
 */
android {
    println '---------app build.gradle , run android{} configure --------'

    //编译项目时使用的SDK版本
    compileSdkVersion 28
    //编译工具版本，一般buildToolsVersion>=compileSdkVersion
    buildToolsVersion "28.0.3"

    //当前子模块的配置，一般就是应用id、允许安装当前app的最小版本、app运行时使用的sdk版本、应用的版本号
    defaultConfig {
        applicationId "com.xuye.androidlearning"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }

    //编译模式，通常为debug和release版做不同的配置
    buildTypes {

        //release版，即正式发行版配置
        release {
            //是否允许混淆代码，混淆一般是为了源码的安全，同时也会减少apk文件的大小(因为类名字被改少了，用的字节数少了)
            minifyEnabled false
            //混淆规则文件的位置，这里指定了2个文件：/tools/proguard/proguard-android.txt(一些基本会混淆规则)、proguard-rules.pro
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        //关闭lint检查的error
        abortOnError false
    }

    //官方文档：https://developer.android.com/studio/build/build-variants.html?hl=zh-cn
    sourceSets {
        main {
            //res.srcDirs声明了想要的资源所在的路径，默认采用src/main/res，
            //这里增加了一个路径src/main/res-auto，使得该目录下的文件也变为了资源
            res.srcDirs = ['src/main/res', 'src/main/res-auto']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//当前project编译所需要的依赖库
dependencies {
    println '---------app build.gradle , run dependencies{} configure --------'
    //编译libs目录下的所有jar包
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(':base')

    testCompile 'junit:junit:4.12'

    //依赖的第三方库，com.android.support这个基本都需要依赖，用于低版本兼容高版本特性，库的版本一般和compileSdkVersion一样
    compile 'com.android.support:appcompat-v7:26.0.2'
    compile 'com.jakewharton:disklrucache:2.0.2'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    compile 'com.google.code.gson:gson:2.8.2'
}

//根据gradle.properties生成配置文件on_test_config.xml，供代码里获取是否是测试版
task setOnTestConfig {
    doLast {
        println "----run setOnTestConfig----"
        println rootDir
        def file = new File(rootDir, 'app/src/main/res-auto/values/on_test_config.xml');
        if (file.exists()) {
            file.withWriter('utf-8') {
                writer ->
                    writer.writeLine '<?xml version="1.0" encoding="utf-8"?>'
                    writer.writeLine '<!-- 注意： 这个文件在打包时由gradle脚本自动生成，请勿手动修改 -->'
                    writer.writeLine '<resources>'
                    if (Boolean.parseBoolean(project.on_test)) {
                        writer.writeLine '  <bool name="on_test">true</bool>'
                    } else {
                        writer.writeLine '  <bool name="on_test">false</bool>'
                    }
                    writer.writeLine '</resources>'
            }
        } else {
            throw new GradleException('app_config.xml does not exists!')
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == "assembleDebug") {
        println "----whenTaskAdded : assembleDebug----"
        task.mustRunAfter setOnTestConfig
    }
}

//自定义的打包task，依赖task：setOnTestConfig，assembleDebug
task bfd(dependsOn: ["setOnTestConfig", "assembleDebug"]) {
    doLast {
        println "----run bfd----"
    }
}
